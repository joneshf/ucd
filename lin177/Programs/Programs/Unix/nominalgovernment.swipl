:- ['sets.swipl'].
:- ['allsuch.swipl'].
:- ['doublecolon.swipl'].
:- ['fulldisplay.swipl'].


/** RULES FOR DIRECT NOMINAL CLAUSES FOLLOW **/

english([ bart], [nom,wrd,prp], [R :: bearer(R,[ bart])]).
english([homer], [nom,wrd,prp], [R :: bearer(R,[homer])]).
english([ lisa], [nom,wrd,prp], [R :: bearer(R,[ lisa])]).
english([marge], [nom,wrd,prp], [R :: bearer(R,[marge])]).

english([every], [det,wrd], [    R :: allsuch([X,Y],includes(X,Y), R)]).
english([ some], [det,wrd], [    R :: allsuch([X,Y],overlaps(X,Y), R)]).
english([   no], [det,wrd], [    R :: allsuch([X,Y],excludes(X,Y), R)]).
english([  the], [det,wrd], [R :: allsuch([X,[Y]],includes(X,[Y]), R)]).

english([grownup], [nom,wrd,com], [R :: allsuch(X,grownup(X),R)]).
english([    kid], [nom,wrd,com], [R :: allsuch(X,    kid(X),R)]).

english([  male], [adj,wrd], [R :: allsuch(X,  male(X),R)]).
english([female], [adj,wrd], [R :: allsuch(X,female(X),R)]).

english(SO, [nom,phr,com], ME):-
	english(SO, [nom,wrd,com], ME).

english(SO, [nom,phr,com], [R :: allsuch(X,(Y1,Y2),R)]):-
	english(SO1, [adj,wrd    ], [R1 :: allsuch(X,Y1,R1)]),
	english(SO2, [nom,wrd,com], [R2 :: allsuch(X,Y2,R2)]),
	append( SO1,  SO2,  SO).

english(SO, [nom,cls], [R :: allsuch(X,(Z1,Z2),R)]):-
	english(SO1, [det,wrd], [R1 :: allsuch([X,R2],Z1,R1)]),
	english(SO2, [nom, phr,com], [R2 :: Z2]),
	append(SO1, SO2, SO).

english(SO, [nom,cls], [R :: allsuch(X,(Y,includes(X,Z)), R)]):-
	english(SO, [nom,phr,prp], [Z :: Y]).


/** RULES FOR GENITIVE NOMINAL CLAUSES FOLLOW **/

english([parent], [nom,wrd,rel], [R :: allsuch([X,Y],parent(X,Y), R)]).
english([child ], [nom,wrd,rel], [R :: allsuch([X,Y], child(X,Y), R)]).
english([of],[prp,wrd,gen], [R :: allsuch([X,Y], of(X,Y), R)]).

english(SO, [nom,cls,SUBCAT], ME):-
		english(SO1,[prp,wrd,SUBCAT], _),
		english(SO2,[nom,cls], ME),
		append(SO1,SO2,SO).

english(SO, [nom,phr], [R :: 
	allsuch(X,(S1,S2,member([X,_],R1),
	allsuch(Y,member([X,Y],R1),Z),member(Z,R2)),R)]):-
		english(SO1, [nom,wrd,rel], [R1 :: S1]),
		english(SO2, [nom,cls,gen], [R2 :: S2]),
		append(SO1,  SO2, SO).


/** A MODEL FOLLOWS **/

entity(bart).
entity(homer).
entity(lisa).
entity(marge).

male(bart).
male(homer).

female(A):-
	entity(A),
	not(male(A)).

kid(bart).
kid(lisa).

grownup(A):-
	entity(A),
	not(kid(A)).

parent(homer, bart).
parent(homer, lisa).
parent(marge, bart).
parent(marge, lisa).

child(A,B):-
	parent(B,A).

bearer(bart,  [bart]).
bearer(homer, [homer]).
bearer(lisa,  [lisa]).
bearer(marge, [marge]).

universe(A):-
	allsuch(X, entity(X), A).
