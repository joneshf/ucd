# Beginning of a TSP model

# Number of cities
param n := 6;

set V := { 1..n };

set E := { <1, 2>, <1, 3>, <1, 4>, <1, 5>, <1, 6>,
                   <2, 3>, <2, 4>, <2, 5>, <2, 6>, 
                           <3, 4>, <3, 5>, <3, 6>, 
                                   <4, 5>, <4, 6>, 
                                           <5, 6> };

# Edge variables
var x[E] binary;

# Distances
param d[E] := 
  <1, 2>  10,
  <1, 3>  10,
  <1, 4>  55,
  <1, 5>  55,
  <1, 6>  55,
  <2, 3>  10,
  <2, 4>  55,
  <2, 5>  25,
  <2, 6>  55,
  <3, 4>  33,
  <3, 5>  44,
  <3, 6>  55,
  <4, 5>  10,
  <4, 6>  10,
  <5, 6>  10;

minimize tour_length:
  d[1, 2] * x[1, 2] + d[1, 3] * x[1, 3] + d[1, 4] * x[1, 4] + d[1, 5] * x[1, 5] + d[1, 6] * x[1, 6]
                    + d[2, 3] * x[2, 3] + d[2, 4] * x[2, 4] + d[2, 5] * x[2, 5] + d[2, 6] * x[2, 6]
	     	                        + d[3, 4] * x[3, 4] + d[3, 5] * x[3, 5] + d[3, 6] * x[3, 6]
		      	     	                            + d[4, 5] * x[4, 5] + d[4, 6] * x[4, 6]
				      	                                        + d[5, 6] * x[5, 6];

subto degree_node_1:
  x[1, 2] + x[1, 3] + x[1, 4] + x[1, 5] + x[1, 6] == 2;

subto degree_node_2:
  x[1, 2] + x[2, 3] + x[2, 4] + x[2, 5] + x[2, 6] == 2;

subto degree_node_3:
  x[1, 3] + x[2, 3] + x[3, 4] + x[3, 5] + x[3, 6] == 2;

subto degree_node_4:
  x[1, 4] + x[2, 4] + x[3, 4] + x[4, 5] + x[4, 6] == 2;

subto degree_node_5:
  x[1, 5] + x[2, 5] + x[3, 5] + x[4, 5] + x[5, 6] == 2;



